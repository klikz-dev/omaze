import { I{% presenterName %}ClassNames, {% presenterName %} } from './{% presenterName %}';

describe('{% presenterName %}', (): void => {
    it('should have all classNames', (): void => {
        const presenter: {% presenterName %} = new {% presenterName %}({});
        const classNames: I{% presenterName %}ClassNames = presenter.getAllClassNames();

        expect(classNames).toEqual({
            host: 'host',
        });
    });

    it('should allow a className config', (): void => {
        const presenter: {% presenterName %} = new {% presenterName %}({
            className: 'extra',
        });

        const classNames: I{% presenterName %}ClassNames = presenter.getAllClassNames();

        expect(classNames).toEqual({
            host: 'host extra',
        });
    });

    it('should have the test id', (): void => {
        let presenter: {% presenterName %} = new {% presenterName %}({});

        expect(presenter.getTestId()).toBeUndefined();

        presenter = new {% presenterName %}({
            dataTestId: 'test-id',
        });

        expect(presenter.getTestId()).toBe('test-id');
    });
});
