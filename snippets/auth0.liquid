{% if settings.auth0_on %}
    <style>
        .loading-container {
            position: fixed;
            width: 100%;
            heigth: 100vh;
            left: 0;
            top: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: white;
            z-index: 1001;
        }

        .loading-container img {
            width: 140px;
            height: 140px;
        }

        .loading-container h3 {
            text-align: center;
            font-size: 1.125rem;
            letter-spacing: 0.32px;
            margin-top: 1rem;
        }
    </style>

    <script src="{{ settings.auth0_spa_sdk_js_url }}"></script>

    <script>
        (function (window) {
            const auth0 = new Auth0Client({
                domain: '{{ settings.auth0_domain }}',
                audience: '{{ settings.auth0_audience }}',
                client_id: '{{ settings.auth0_client_id }}',
                redirect_uri: '{{ settings.auth0_redirect_uri }}',
                cacheLocation: '{{ settings.auth0_cache_location }}',
            });

            const showLoading = () => {
                const container = document.createElement("div");
                container.classList.add("loading-container");

                // Loader icon
                const img = document.createElement("img");
                img.src = "https://images.omaze.com/auth0/loader.gif";
                img.alt = "loading";

                // Text
                const h3 = document.createElement("h3");
                h3.innerText = "We’re logging you in… hang tight";

                container.appendChild(img);
                container.appendChild(h3);
                document.body.appendChild(container);

                window.localStorage.setItem('omaze_loggedIn','success');
            }

            const pushToDataLayer = ({category, action, label, value}) => {
                if (category && label && action) {
                    const dataLayerEvent = {
                        event: 'click',
                        ga_category: category,
                        ga_action: action,
                        ga_label: label,
                        ga_value: value,
                    };

                    if (window.dataLayer) {
                        window.dataLayer.push(dataLayerEvent);
                    }
                }
            };

            // GA - Failed Login
            const searchParams = new URLSearchParams(window.location.search);
            if(searchParams.has("error") &&
                searchParams.has("error_description") &&
                searchParams.has("state")){

                const dataLayerConfig = {
                    category: 'Login',
                    action: 'Form',
                    label: 'Omaze',
                    value: 0,
                }
                pushToDataLayer(dataLayerConfig);
                let redirectPath =  "/pages/account-services-error";

                let message = searchParams.get("error_description")
                if(message.includes("Please verify your email before logging in")){

                    message = message.split(": ")
                    let email = '';
                    if(message.length > 1){
                        email = message[1];
                    }

                    redirectPath = "/pages/create-account-message?email=" + email;
                }
                auth0.logout({
                    returnTo: window.location.origin + redirectPath
                });
            }

            auth0.isAuthenticated().then((isAuthenticated) => {
                const isAuthenticatedInShopify = {{ customer.id | json }};

                if (isAuthenticated) {
                    if (isAuthenticatedInShopify) {
                        return;
                    } else {
                        auth0.logout();
                    }
                }

                const query = new URLSearchParams(window.location.search);
                if (query.has("code") && query.has("state")) {
                    showLoading();

                    auth0.handleRedirectCallback().then(() => {
                        auth0.getIdTokenClaims().then((data) => {
                            // GA
                            const gaCategory = data['{{ settings.auth0_ga_namespace }}/ga_category'];
                            const gaLabel = data['{{ settings.auth0_ga_namespace }}/ga_label'];

                            const dataLayerConfig = {
                                category: gaCategory,
                                action: 'Form',
                                label: gaLabel,
                                value: 1,
                            }
                            pushToDataLayer(dataLayerConfig);

                            // Redirect to the Shopify Multipass Url to log the Customer
                            // in Shopify
                            window.location = '{{ settings.shopify_multipass_url }}/' + data['{{ settings.auth0_multipass_token_namespace }}'];
                        });
                    });
                }
            });

            // Attached Login Event
            const attachLoginEvents = (cssClassSelectors) => {
                const loginEvent = (redirectTo = null) => {
                    let options = {
                        return_to: window.location,
                    };

                    if (redirectTo) {
                        options.return_to = redirectTo;
                    }

                    if(!window.ozGeolocation){
                        auth0.loginWithRedirect(options);
                        return;
                    }

                    // Note: the window.ozGeolocation is defined and implemented on geolocation-head.liquid
                    window.ozGeolocation
                        .getData(3000)
                        .then((data) => {
                            options.country_code = data.COUNTRY_CODE;
                            auth0.loginWithRedirect(options);
                        })
                        .catch((error) => {
                            auth0.loginWithRedirect(options);
                        });
                };

                attachClickEvents(cssClassSelectors, loginEvent);

                // Current full Url
                const url = new URL(window.location.href);
                const isCartPage = url.pathname.includes('/cart');
                const isCheckoutPage = url.pathname.includes('/checkout');
                const accountDashboard = '/account#/experiences';
                if (isCartPage || isCheckoutPage) {
                    attachClickEvents(cssClassSelectors, loginEvent);
                } else {
                    const redirectTo = window.location.origin + accountDashboard;
                    attachClickEvents(cssClassSelectors, () => loginEvent(redirectTo));
                }

                // Redirect to Auth0 Login if the customer navigate directly to the Shopify
                // Login Url or by beeing redirect back to the Login from the
                // Shopify Chechout page
                if (url.pathname.includes("/account/login")) {
                    loginEvent(url.searchParams.get('checkout_url'));
                }
            };

            // Attached Logout Event
            const attachLogOutEvents = (cssClassSelectors) => {
                const logoutEvent = () => {
                    pushToDataLayer({
                        category: 'Navigation',
                        action: 'Nav Click',
                        label: 'Log Out',
                    })
                    auth0.logout({
                        returnTo: window.location.origin + '/account/logout'
                    });
                };
                attachClickEvents(cssClassSelectors, logoutEvent);
            };

            const attachClickEvents = (cssClassSelectors, onClickFn) => {
                if (typeof(onClickFn) !== 'function') {
                    console.warn('[auth0 attachClickEvents] invalid onClickFn');

                    return false;
                }

                if (typeof(cssClassSelectors) === 'string') {
                    cssClassSelectors = [cssClassSelectors];
                }

                cssClassSelectors.forEach((cssClass) => {
                    const els = document.getElementsByClassName(cssClass);

                    Array.from(els).forEach((el) => {
                        el.addEventListener('click', (event) => {
                            event.preventDefault();

                            onClickFn();
                        });
                    })
                });
            };

            const attachCreateAccountEvents = () => {
                const createAccountEvent = () => {
                    let options = {};
                    options.initialScreen = 'signUp';
                    auth0.loginWithRedirect(options);
                };

                const url = new URL(window.location.href);
                if (url.pathname.includes("/account/register")) {
                    createAccountEvent()
                }
            };

            // Use CSS Class Selectors; Elements retrieved with 'getElementsByClassName'
            attachLoginEvents(['js-nav-btn--login']);
            attachLogOutEvents(['js-nav-btn--logout']);
            attachCreateAccountEvents();
        })(window);
    </script>
{% endif %}
