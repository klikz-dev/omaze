import '@testing-library/jest-dom/extend-expect';

import { bootstrapAndRender, ITestComponent } from '@omaze/test';
import React from 'react';
import { mocked } from 'ts-jest/utils';

import { FEATURE_NAME } from '{% namespacePath %}';

import { {% componentName %} } from './{% componentName %}.component';
import { {% componentName %}Presenter } from './{% componentName %}Presenter/{% componentName %}Presenter';

jest.mock('./{% componentName %}Presenter/{% componentName %}Presenter');

describe({% componentName %}.displayName, (): void => {
    it('was created by the namespace', (): void => {
        expect({% componentName %}.displayName).toContain('{% componentName %}');
        expect({% componentName %}.app).toContain(FEATURE_NAME);
    });

    beforeEach((): void => {
        mocked({% componentName %}Presenter).mockClear();
        mocked({% componentName %}Presenter.prototype.getAllClassNames).mockReturnValue({
            host: 'host',
        });
        mocked({% componentName %}Presenter.prototype.getTestId).mockReturnValue('test-id');
    });

    it('should render', (): void => {
        const { component }: ITestComponent = bootstrapAndRender(
            <{% componentName %} />
        );

        expect(component.container.querySelector('.host')).toBeInTheDocument();
        expect(component.getByTestId('test-id')).toBeInTheDocument();
    });

    it('should accept a className prop', (): void => {
        bootstrapAndRender(
            <{% componentName %} className="extra" />
        );

        expect(mocked({% componentName %}Presenter)).toHaveBeenCalledWith({
            className: 'extra',
        });
    });

    it('should accept a data-testid prop', (): void => {
        bootstrapAndRender(
            <{% componentName %} data-testid="test-id" />
        );

        expect(mocked({% componentName %}Presenter)).toHaveBeenCalledWith({
            dataTestId: 'test-id',
        });
    });
});
